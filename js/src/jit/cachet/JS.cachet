// vim: set tw=99 ts=4 sts=4 sw=4 et:

struct Heap;
var mut heap: Heap;

#[spec]
enum RegDataType {
    Value,
    UnboxedValue,
}

#[spec]
struct RegData;

impl RegData {
    fn typeOf(data: RegData) -> RegDataType;

    fn isValue(data: RegData) -> Bool {
        RegData::typeOf(data) == RegDataType::Value
    }

    fn fromValue(value: Value) -> RegData {
        let data = (unsafe { RegData::fromValueUnchecked(value) });
        assume RegData::isValue(data);
        assume (unsafe { RegData::toValueUnchecked(data) }) == value;
        data
    }

    unsafe fn fromValueUnchecked(value: Value) -> RegData;

    fn toValue(data: RegData) -> Value {
        assert RegData::isValue(data);
        let value = (unsafe { RegData::toValueUnchecked(data) });
        assume (unsafe { RegData::fromValueUnchecked(value) }) == data;
        value
    }

    unsafe fn toValueUnchecked(data: RegData) -> Value;

    fn isUnboxedValue(data: RegData) -> Bool {
        RegData::typeOf(data) == RegDataType::UnboxedValue
    }

    fn fromUnboxedValue(value: Value) -> RegData {
        let data = (unsafe { RegData::fromUnboxedValueUnchecked(value) });
        assume RegData::isUnboxedValue(data);
        assume (unsafe { RegData::toUnboxedValueUnchecked(data) }) == value;
        data
    }

    unsafe fn fromUnboxedValueUnchecked(value: Value) -> RegData;

    fn toUnboxedValue(data: RegData) -> Value {
        assert RegData::isUnboxedValue(data);
        let value = (unsafe { RegData::toUnboxedValueUnchecked(data) });
        assume (unsafe { RegData::fromUnboxedValueUnchecked(value) }) == data;
        value
    }

    unsafe fn toUnboxedValueUnchecked(data: RegData) -> Value;

    #[spec]
    fn readData(data: RegData, offset: Int64) -> RegData {
        if RegData::isUnboxedValue(data) {
            let value = RegData::toUnboxedValue(data);
            return Value::readData(value, offset);
        }

        assert false;
        data // returning to satisfy compiler
    }
}


enum ValueType {
  Double,
  Int32,
  Bool,
  Undefined,
  Null,
  Magic,
  String,
  Symbol,
  PrivateGCThing,
  BigInt,
  Object,
  Unknown,
}

struct Value;

impl Value {
    var sizeOf: UInt64 = 8_u64;

    fn typeOf(value: Value) -> ValueType;

    fn isDouble(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::Double
    }

    fn fromDouble(double: Double) -> Value {
        let value = (unsafe { Value::fromDoubleUnchecked(double) });
        assume Value::isDouble(value);
        assume (unsafe { Value::toDoubleUnchecked(value) }) == double;
        value
    }

    unsafe fn fromDoubleUnchecked(value: Double) -> Value;

    fn toDouble(value: Value) -> Double {
        assert Value::isDouble(value);
        let double = (unsafe { Value::toDoubleUnchecked(value) });
        assume (unsafe { Value::fromDoubleUnchecked(double) }) == value;
        double
    }

    unsafe fn toDoubleUnchecked(value: Value) -> Double;

    fn isInt32(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::Int32
    }

    fn fromInt32(int32: Int32) -> Value {
        let value = (unsafe { Value::fromInt32Unchecked(int32) });
        assume Value::isInt32(value);
        assume (unsafe { Value::toInt32Unchecked(value) }) == int32;
        value
    }

    unsafe fn fromInt32Unchecked(value: Int32) -> Value;

    fn toInt32(value: Value) -> Int32 {
        assert Value::isInt32(value);
        let int32 = (unsafe { Value::toInt32Unchecked(value) });
        assume (unsafe { Value::fromInt32Unchecked(int32) }) == value;
        int32
    }

    unsafe fn toInt32Unchecked(value: Value) -> Int32;

    fn isBool(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::Bool
    }

    fn fromBool(bool: Bool) -> Value {
        let value = (unsafe { Value::fromBoolUnchecked(bool) });
        assume Value::isBool(value);
        assume (unsafe { Value::toBoolUnchecked(value) }) == bool;
        value
    }

    unsafe fn fromBoolUnchecked(value: Bool) -> Value;

    fn toBool(value: Value) -> Bool {
        assert Value::isBool(value);
        let bool = (unsafe { Value::toBoolUnchecked(value) });
        assume (unsafe { Value::fromBoolUnchecked(bool) }) == value;
        bool
    }

    unsafe fn toBoolUnchecked(value: Value) -> Bool;

    fn isNull(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::Null
    }

    fn isUndefined(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::Undefined
    }

    fn isObject(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::Object
    }

    fn fromObject(object: Object) -> Value {
        let value = (unsafe { Value::fromObjectUnchecked(object) });
        assume Value::isObject(value);
        assume (unsafe { Value::toObjectUnchecked(value) }) == object;
        value
    }

    unsafe fn fromObjectUnchecked(value: Object) -> Value;

    fn toObject(value: Value) -> Object {
        assert Value::isObject(value);
        let object = (unsafe { Value::toObjectUnchecked(value) });
        assume (unsafe { Value::fromObjectUnchecked(object) }) == value;
        object
    }

    unsafe fn toObjectUnchecked(value: Value) -> Object;

    fn isMagic(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::Magic
    }

    fn isString(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::String
    }

    fn fromString(string: String) -> Value {
        let value = (unsafe { Value::fromStringUnchecked(string) });
        assume Value::isString(value);
        assume (unsafe { Value::toStringUnchecked(value) }) == string;
        value
    }

    unsafe fn fromStringUnchecked(string: String) -> Value;

    fn toString(value: Value) -> String {
        assert Value::isString(value);
        let string = (unsafe { Value::toStringUnchecked(value) });
        assume (unsafe { Value::fromStringUnchecked(string) }) == value;
        string
    }

    unsafe fn toStringUnchecked(value: Value) -> String;

    fn isSymbol(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::Symbol
    }

    fn fromSymbol(symbol: Symbol) -> Value {
        let value = (unsafe { Value::fromSymbolUnchecked(symbol) });
        assume Value::isSymbol(value);
        assume (unsafe { Value::toSymbolUnchecked(value) }) == symbol;
        value
    }

    unsafe fn fromSymbolUnchecked(symbol: Symbol) -> Value;

    fn toSymbol(value: Value) -> Symbol {
        assert Value::isSymbol(value);
        let symbol = (unsafe { Value::toSymbolUnchecked(value) });
        assume (unsafe { Value::fromSymbolUnchecked(symbol) }) == value;
        symbol
    }

    unsafe fn toSymbolUnchecked(value: Value) -> Symbol;

    fn isBigInt(value: Value) -> Bool {
        Value::typeOf(value) == ValueType::BigInt
    }

    fn fromBigInt(bigInt: BigInt) -> Value {
        let value = (unsafe { Value::fromBigIntUnchecked(bigInt) });
        assume Value::isBigInt(value);
        assume (unsafe { Value::toBigIntUnchecked(value) }) == bigInt;
        value
    }

    unsafe fn fromBigIntUnchecked(bigInt: BigInt) -> Value;

    fn toBigInt(value: Value) -> BigInt {
        assert Value::isBigInt(value);
        let bigInt = (unsafe { Value::toBigIntUnchecked(value) });
        assume (unsafe { Value::fromBigIntUnchecked(bigInt) }) == value;
        bigInt
    }

    unsafe fn toBigIntUnchecked(value: Value) -> BigInt;

    #[spec]
    fn readData(value: Value, offset: Int64) -> RegData {
        if Value::isObject(value) {
            let object = Value::toObject(value);
            return Object::readData(object, offset);
        }

        assert false; // Only support Object for now
        return RegData::fromValue(value);
    }
}

struct Object;

impl Object {
    // #[reads(heap)]
    // fn shapeOf(object: Object) -> Shape;
    fn shapeOf(object: Object) -> Shape {
        (unsafe { Object::shapeOfUnchecked(heap, object) })
    }

    unsafe fn shapeOfUnchecked(heap: Heap, object: Object) -> Shape;

    // #[reads(heap)]
    // fn protoOf(object: Object) -> Value;
    //fn protoOf(object: Object) -> Value {
    //    (unsafe { Object::protoOfUnchecked(heap, object) })
    //}

    //unsafe fn protoOfUnchecked(heap: Heap, object: Object) -> Value;

    fn toNativeObject(object: Object) -> NativeObject {
        let shape = Object::shapeOf(object);
        let class = Shape::classOf(shape);
        assert Class::isNativeObject(class);
        (unsafe { object as NativeObject })
    }

    fn getFixedSlot(object: Object, slot: UInt32) -> Value {
        let nativeObject = Object::toNativeObject(object);
        NativeObject::getFixedSlot(nativeObject, slot)
    }

    // read RegData at the specified memory offset of the Object
    #[spec]
    fn readData(object: Object, offset: Int64) -> RegData {
        let shape = Object::shapeOf(object);
        let class = Shape::classOf(shape);

        if Class::isNativeObject(class) {
            let nativeObject = (unsafe { object as NativeObject });
            return NativeObject::readData(nativeObject, offset);
        }

        assert false; // only support NativeObject for now
        return RegData::fromValue(Value::fromObject(object)); // satisfy the compiler
    }
}

struct NativeObject <: Object;

impl NativeObject {
    var maxFixedSlots: UInt64 = 16_u64;
    var sizeOf: UInt64 = 24_u64;

    fn getFixedSlot(nativeObject: NativeObject, slot: UInt32) -> Value {
        let shape = Object::shapeOf(nativeObject);
        assert Shape::hasFixedSlot(shape, slot);
        (unsafe { NativeObject::getFixedSlotUnchecked(heap, nativeObject, slot) })
    }

    // #[reads(heap)]
    // unsafe fn getFixedSlotUnchecked(nativeObject: NativeObject, slot: UInt32) -> Value;
    unsafe fn getFixedSlotUnchecked(heap: Heap, nativeObject: NativeObject, slot: UInt32) -> Value;

    #[spec]
    fn readData(nativeObject: NativeObject, offset: Int64) -> RegData {
        if offset >= NativeObject::sizeOf as Int64 {
            // fixed slots
            let slotOffset = offset as UInt64 - NativeObject::sizeOf;
            assert slotOffset % Value::sizeOf == 0_u64;
            assert slotOffset / Value::sizeOf < NativeObject::maxFixedSlots;
            let slot = (slotOffset / Value::sizeOf) as UInt32;
            let value = NativeObject::getFixedSlot(nativeObject, slot);
            return RegData::fromValue(value);
        }

        assert false;
        return RegData::fromValue(Value::fromObject(nativeObject as Object)); // satisfy the compiler
    }
}

struct NativeObjectSlots;

struct NativeObjectElements;

struct Shape;

impl Shape {
    fn classOf(shape: Shape) -> Class;

    fn hasFixedSlot(shape: Shape, slot: UInt32) -> Bool;
}

struct Class;

impl Class {
    fn isNativeObject(class: Class) -> Bool;
    fn isProxyObject(class: Class) -> Bool;
}

struct String;

struct Symbol;

struct BigInt;
