// vim: set tw=99 ts=4 sts=4 sw=4 et:

import "./MASM.cachet"

enum OperandLocationKind {
    Uninitialized,
    PayloadReg,
    ValueReg,
}

struct OperandLocation;

impl OperandLocation {
    fn kind(loc: OperandLocation) -> OperandLocationKind; 

    fn newUninitialized() -> OperandLocation {
        let loc = (unsafe { OperandLocation::newUninitializedUnchecked() });
        assume OperandLocation::kind(loc) == OperandLocationKind::Uninitialized;
        loc
    }

    unsafe fn newUninitializedUnchecked() -> OperandLocation;

    fn setValueReg(out loc: OperandLocation, valueReg: ValueReg) {
        (unsafe { OperandLocation::setValueRegUnchecked(out loc, valueReg) }); 
        assume OperandLocation::kind(loc) == OperandLocationKind::ValueReg;
        assume (unsafe { OperandLocation::getValueRegUnchecked(loc) } ) == valueReg;
    }

    unsafe fn setValueRegUnchecked(out loc: OperandLocation, valueReg: ValueReg);

    fn getValueReg(loc: OperandLocation) -> ValueReg {
        assert OperandLocation::kind(loc) == OperandLocationKind::ValueReg;
        let valueReg = (unsafe { OperandLocation::getValueRegUnchecked(loc) });
        valueReg
    }

    unsafe fn getValueRegUnchecked(loc: OperandLocation) -> ValueReg;

    fn setPayloadReg(out loc: OperandLocation, reg: Reg, type: JSValueType) {
        (unsafe { OperandLocation::setPayloadRegUnchecked(out loc, reg, type) }); 
        assume OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        assume (unsafe { OperandLocation::getPayloadRegUnchecked(loc) } ) == reg;
        assume (unsafe { OperandLocation::getPayloadTypeUnchecked(loc) } ) == type;
    }

    unsafe fn setPayloadRegUnchecked(out loc: OperandLocation, reg: Reg, type: JSValueType);

    fn getPayloadReg(loc: OperandLocation) -> Reg {
        assert OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        let reg = (unsafe { OperandLocation::getPayloadRegUnchecked(loc) });
        reg
    }

    unsafe fn getPayloadRegUnchecked(loc: OperandLocation) -> Reg;

    fn getPayloadType(loc: OperandLocation) -> JSValueType {
        assert OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        let type = (unsafe { OperandLocation::getPayloadTypeUnchecked(loc) });
        type
    }

    unsafe fn getPayloadTypeUnchecked(loc: OperandLocation) -> JSValueType;
}

struct OperandId;

struct ValueId <: OperandId;

struct ObjectId <: OperandId;
struct Int32Id <: OperandId;
struct BooleanId <: OperandId;
struct StringId <: OperandId;
struct ValueTagId <: OperandId;

struct TypedId <: OperandId;

impl TypedId {
    fn type(typedId: TypedId) -> JSValueType;

    fn isValueId(typedId: TypedId) -> Bool;

    fn fromValueId(valueId: ValueId, type: JSValueType) -> TypedId {
        let typedId = (unsafe { TypedId::fromValueIdUnchecked(valueId, type) });
        assume TypedId::isValueId(typedId);
        assume TypedId::type(typedId) == type;
        assume (unsafe { TypedId::toValueIdUnchecked(typedId) }) == valueId;
        assume (valueId as OperandId) == (typedId as OperandId);
        typedId
    }

    unsafe fn fromValueIdUnchecked(valueId: ValueId, type: JSValueType) -> TypedId;

    fn toValueId(typedId: TypedId) -> ValueId {
        assert TypedId::isValueId(typedId);
        let type = TypedId::type(typedId);
        let valueId = (unsafe { TypedId::toValueIdUnchecked(typedId) });
        assume (unsafe { TypedId::fromValueIdUnchecked(valueId, type) }) == typedId; 
        valueId
    }

    unsafe fn toValueIdUnchecked(typedId: TypedId) -> ValueId;

    fn fromObjectId(objectId: ObjectId) -> TypedId {
        let typedId = (unsafe { TypedId::fromObjectIdUnchecked(objectId) });
        assume !TypedId::isValueId(typedId);
        assume TypedId::type(typedId) == JSValueType::Object;
        assume (unsafe { TypedId::toObjectIdUnchecked(typedId) }) == objectId;
        assume (objectId as OperandId) == (typedId as OperandId);
        typedId
    }

    unsafe fn fromObjectIdUnchecked(objectId: ObjectId) -> TypedId;

    fn toObjectId(typedId: TypedId) -> ObjectId {
        assert !TypedId::isValueId(typedId);
        assert TypedId::type(typedId) == JSValueType::Object;
        let objectId = (unsafe { TypedId::toObjectIdUnchecked(typedId) });
        assume (unsafe { TypedId::fromObjectIdUnchecked(objectId) }) == typedId;
        objectId
    }

    unsafe fn toObjectIdUnchecked(typedId: TypedId) -> ObjectId;

    fn fromInt32Id(int32Id: Int32Id) -> TypedId {
        let typedId = (unsafe { TypedId::fromInt32IdUnchecked(int32Id) });
        assume !TypedId::isValueId(typedId);
        assume TypedId::type(typedId) == JSValueType::Int32;
        assume (unsafe { TypedId::toInt32IdUnchecked(typedId) }) == int32Id;
        assume (int32Id as OperandId) == (typedId as OperandId);
        typedId
    }

    unsafe fn fromInt32IdUnchecked(int32Id: Int32Id) -> TypedId;

    fn toInt32Id(typedId: TypedId) -> Int32Id {
        assert !TypedId::isValueId(typedId);
        assert TypedId::type(typedId) == JSValueType::Int32;
        let int32Id = (unsafe { TypedId::toInt32IdUnchecked(typedId) });
        assume (unsafe { TypedId::fromInt32IdUnchecked(int32Id) }) == typedId;
        int32Id
    }

    unsafe fn toInt32IdUnchecked(typedId: TypedId) -> Int32Id;

    fn fromBooleanId(booleanId: BooleanId) -> TypedId {
        let typedId = (unsafe { TypedId::fromBooleanIdUnchecked(booleanId) });
        assume !TypedId::isValueId(typedId);
        assume TypedId::type(typedId) == JSValueType::Bool;
        assume (unsafe { TypedId::toBooleanIdUnchecked(typedId) }) == booleanId;
        assume (booleanId as OperandId) == (typedId as OperandId);
        typedId
    }

    unsafe fn fromBooleanIdUnchecked(booleanId: BooleanId) -> TypedId;

    fn toBooleanId(typedId: TypedId) -> BooleanId {
        assert !TypedId::isValueId(typedId);
        assert TypedId::type(typedId) == JSValueType::Bool;
        let booleanId = (unsafe { TypedId::toBooleanIdUnchecked(typedId) });
        assume (unsafe { TypedId::fromBooleanIdUnchecked(booleanId) }) == typedId;
        booleanId
    }

    unsafe fn toBooleanIdUnchecked(typedId: TypedId) -> BooleanId;

    fn fromStringId(stringId: StringId) -> TypedId {
        let typedId = (unsafe { TypedId::fromStringIdUnchecked(stringId) });
        assume !TypedId::isValueId(typedId);
        assume TypedId::type(typedId) == JSValueType::String;
        assume (unsafe { TypedId::toStringIdUnchecked(typedId) }) == stringId;
        assume (stringId as OperandId) == (typedId as OperandId);
        typedId
    }

    unsafe fn fromStringIdUnchecked(stringId: StringId) -> TypedId;

    fn toStringId(typedId: TypedId) -> StringId {
        assert !TypedId::isValueId(typedId);
        assert TypedId::type(typedId) == JSValueType::String;
        let stringId = (unsafe { TypedId::toStringIdUnchecked(typedId) });
        assume (unsafe { TypedId::fromStringIdUnchecked(stringId) }) == typedId;
        stringId
    }

    unsafe fn toStringIdUnchecked(typedId: TypedId) -> StringId;


    fn fromValueTagId(valueTagId: ValueTagId) -> TypedId {
        let typedId = (unsafe { TypedId::fromValueTagIdUnchecked(valueTagId) });
        assume !TypedId::isValueId(typedId);
        assume TypedId::type(typedId) == JSValueType::Unknown;
        assume (unsafe { TypedId::toValueTagIdUnchecked(typedId) }) == valueTagId;
        assume (valueTagId as OperandId) == (typedId as OperandId);
        typedId
    }

    unsafe fn fromValueTagIdUnchecked(valueTagId: ValueTagId) -> TypedId;

    fn toValueTagId(typedId: TypedId) -> ValueTagId {
        assert !TypedId::isValueId(typedId);
        assert TypedId::type(typedId) == JSValueType::Unknown;
        let valueTagId = (unsafe { TypedId::toValueTagIdUnchecked(typedId) });
        assume (unsafe { TypedId::fromValueTagIdUnchecked(valueTagId) }) == typedId;
        valueTagId
    }

    unsafe fn toValueTagIdUnchecked(typedId: TypedId) -> ValueTagId;
}

struct Int32Field;
struct StringField;
struct ShapeField;
struct ClassField;

enum GuardClassKind {
    Array,
    ArrayBuffer,
    SharedArrayBuffer,
    DataView,
    MappedArguments,
    UnmappedArguments,
    WindowProxy,
    JSFunction,
    Set,
    Map,
}

ir CacheIR emits MASM {
    op GuardIsNumber(inputId: ValueId) {
        let knownType = CacheIR::knownType(inputId);

        if knownType == JSValueType::Double || knownType == JSValueType::Int32 {
           return;
        }

        let inputReg = CacheIR::useValueReg(inputId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestNumber(Condition::NotEqual, inputReg, failure);
    }

    op GuardToObject(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Object {
            return;
        }

        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestObject(Condition::NotEqual, inputReg, failure);
    }

    op GuardIsNullOrUndefined(inputId: ValueId) {
        let knownType = CacheIR::knownType(inputId);
        if knownType == JSValueType::Undefined || knownType == JSValueType::Null {
            return;
        }

        let inputReg = CacheIR::useValueReg(inputId);
        CacheIR::addFailurePath(out label failure);

        label success: MASM;
        emit MASM::BranchTestNull(Condition::Equal, inputReg, success);
        emit MASM::BranchTestUndefined(Condition::NotEqual, inputReg, failure);

        bind success;
    }

    op GuardIsNull(inputId: ValueId){
        if CacheIR::knownType(inputId) == JSValueType::Null {
            return;
        }

        let inputReg = CacheIR::useValueReg(inputId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestNull(Condition::NotEqual, inputReg, failure);
    }

    op GuardIsUndefined(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Undefined {
            return;
        }

        let inputReg = CacheIR::useValueReg(inputId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestUndefined(Condition::NotEqual, inputReg, failure);
    }

    op GuardToString(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::String {
            return;
        }

        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestString(Condition::NotEqual, inputReg, failure);
    }

    op GuardToSymbol(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Symbol {
            return;
        }

        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestSymbol(Condition::NotEqual, inputReg, failure);
    }

    op GuardToBigInt(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::BigInt {
            return;
        }

        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestBigInt(Condition::NotEqual, inputReg, failure);
    }

    op GuardToBoolean(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Bool {
            return;
        }
        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestBoolean(Condition::NotEqual, inputReg, failure);
    }

    op GuardToInt32(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Int32 {
            return;
        }
        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestInt32(Condition::NotEqual, inputReg, failure);
    }

    /*op GuardToInt32Index(inputId: ValueId, resultId: Int32Id) {
        let outputReg = CacheIR::defineInt32Reg(resultId);

        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        label done: MASM;

        {
            let tagReg = CacheIR::allocateScratchReg();
            emit MASM::SplitTagForTest(inputReg, tagReg);

            label notInt32: MASM;
            emit MASM::BranchTestInt32Tag(Condition::NotEqual, tagReg, notInt32);
            {
                CacheIR::releaseReg(tagReg);
                emit MASM::UnboxInt32(inputReg, outputReg);
                emit MASM::Jump(done);
                CacheIR::allocateScratchReg();
            }
            bind notInt32;

            emit MASM::BranchTestDoubleTag(Condition::NotEqual, tagReg, failure);
            {
                CacheIR::releaseReg(tagReg);
                let floatReg = CacheIR::allocateAvailableFloatReg(FloatReg::floatReg0());

                emit MASM::UnboxDouble(inputReg, floatReg);
                emit MASM::ConvertDoubleToInt32(floatReg, outputReg, failure, false);
                CacheIR::allocateScratchReg();
            }
            CacheIR::releaseReg(tagReg);
        }

        bind done;
    }*/

    op GuardNonDoubleType(inputId: ValueId, type: ValueType) {
        if CacheIR::knownType(inputId) == JSValueType::fromValueType(type) {
            return;
        }

        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        if type == ValueType::String {
            emit MASM::BranchTestString(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Symbol {
            emit MASM::BranchTestSymbol(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::BigInt {
            emit MASM::BranchTestBigInt(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Int32 {
            emit MASM::BranchTestInt32(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Bool {
            emit MASM::BranchTestBoolean(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Undefined {
            emit MASM::BranchTestUndefined(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Null {
            emit MASM::BranchTestNull(Condition::NotEqual, inputReg, failure);
        } else {
            assert false;
        }
    }

    op GuardClass(objId: ObjectId, kind: GuardClassKind) {
        let objReg = CacheIR::useObjectReg(objId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        let class = ArrayObject::class();

        if kind == GuardClassKind::Array {
            class = ArrayObject::class();
        } else if kind == GuardClassKind::ArrayBuffer {
            class = ArrayBufferObject::class();
        } else if kind == GuardClassKind::SharedArrayBuffer {
            class = SharedArrayBufferObject::class();
        } else if kind == GuardClassKind::DataView {
            class = DataViewObject::class();
        } else if kind == GuardClassKind::MappedArguments {
            class = MappedArgumentsObject::class();
        } else if kind == GuardClassKind::UnmappedArguments {
            class = UnmappedArgumentsObject::class();
        } else if kind == GuardClassKind::WindowProxy {
            class = Class::windowProxyClass();
        } else if kind == GuardClassKind::Set {
            class = SetObject::class();
        } else if kind == GuardClassKind::Map {
            class = MapObject::class();
        } else if kind == GuardClassKind::JSFunction {
            class = JSFunction::class();
        } else {
            assert false;
        }

        if CacheIR::objectGuardNeedsSpectreMitigations(objId) {
            emit MASM::BranchTestObjClass(Condition::NotEqual, objReg, class, scratchReg, objReg,
                    failure);
        } else {
            emit MASM::BranchTestObjClassNoSpectreMitigations(Condition::NotEqual, objReg, class,
                    scratchReg, failure);
        }

        CacheIR::releaseReg(scratchReg);
    }

    op GuardIsNativeObject(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectReg(objectId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchIfNonNativeObj(objectReg, scratchReg, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op GuardIsProxy(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectReg(objectId);
        let scratchReg = CacheIR::allocateReg();
        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestObjectIsProxy(false, objectReg, scratchReg, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op GuardNoDenseElements(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectReg(objectId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::LoadPtrAddress(
            Address::new(objectReg, NativeObject::offsetOfElements as Int32), scratchReg
        );

        let initLength = Address::new(scratchReg, NativeObjectElements::offsetOfInitializedLength as Int32);

        emit MASM::Branch32AddressImm32(Condition::NotEqual, initLength, 0_i32, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op GuardInt32IsNonNegative(indexId: Int32Id) {
        let indexReg = CacheIR::useInt32Reg(indexId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::Branch32Imm(Condition::LessThan, indexReg, 0_i32, failure);
    }

    op GuardTagNotEqual(lhsId: ValueTagId, rhsId: ValueTagId) {
        let lhsReg = CacheIR::useValueTagReg(lhsId);
        let rhsReg = CacheIR::useValueTagReg(rhsId);

        CacheIR::addFailurePath(out label failure);

        label done: MASM;

        emit MASM::Branch32Tag(Condition::Equal, lhsReg, rhsReg, failure);

        emit MASM::BranchTestNumberTag(Condition::NotEqual, lhsReg, done);
        emit MASM::BranchTestNumberTag(Condition::NotEqual, rhsReg, done);

        emit MASM::Jump(failure);

        bind done;
    }

    op GuardShape(objectId: ObjectId, shapeField: ShapeField) {
        let objectReg = CacheIR::useObjectReg(objectId);
        let shape = CacheIR::readShapeField(shapeField);

        let scratchReg = CacheIR::allocateReg();
        CacheIR::addFailurePath(out label failure);

        let needsSpectreMitigations = CacheIR::objectGuardNeedsSpectreMitigations(objectId);

        if needsSpectreMitigations {
            emit MASM::BranchTestObjectShape(
                    Condition::NotEqual, objectReg, shape, scratchReg, objectReg, failure
                    );
            CacheIR::releaseReg(scratchReg);
        } else {
            CacheIR::releaseReg(scratchReg);
            emit MASM::BranchTestObjectShapeNoSpectreMitigations(
                    Condition::NotEqual, objectReg, shape, failure
                    );
        }
    }

    op GuardAnyClass(objectId: ObjectId, classField: ClassField) {
        let objectReg = CacheIR::useObjectReg(objectId);
        let scratchReg = CacheIR::allocateReg();
        let class = CacheIR::readClassField(classField);

        CacheIR::addFailurePath(out label failure);

        let needsSpectreMitigations = CacheIR::objectGuardNeedsSpectreMitigations(objectId);

        if needsSpectreMitigations {
            emit MASM::BranchTestObjClass(
                Condition::NotEqual, objectReg, class, scratchReg, objectReg, failure
            );
        } else {
            emit MASM::BranchTestObjClassNoSpectreMitigations(
                Condition::NotEqual, objectReg, class, scratchReg, failure
            );
        }

        CacheIR::releaseReg(scratchReg);
    }

    op GuardSpecificAtom(strId: StringId, stringField: StringField) {
        let strReg = CacheIR::useStringReg(strId);
        let scratchReg = CacheIR::allocateReg();

        let atom = String::asAtom(CacheIR::readStringField(stringField));

        CacheIR::addFailurePath(out label failure);

        let volatileRegs = LiveRegSet::new(
            GeneralRegSet::newVolatile(), CacheIR::liveVolatileFloatRegs()
        );
        LiveRegSet::takeReg(out volatileRegs, volatileRegs, scratchReg);

        emit MASM::GuardSpecificAtom(strReg, atom, scratchReg, volatileRegs, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op LoadInt32Constant(valField: Int32Field, resultId: Int32Id) {
        let resultReg = CacheIR::defineInt32Reg(resultId);

        CacheIR::emitLoadInt32StubField(valField, resultReg);
    }

    op LoadFixedSlotResult(objectId: ObjectId, slotField: Int32Field) {
        let objectReg = CacheIR::useObjectReg(objectId);
        let slotOffset = CacheIR::readInt32Field(slotField);

        emit MASM::LoadTypedOrValueAddress(Address::new(objectReg, slotOffset), CacheIR::outputReg);
    }

    op Int32AddResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Reg(lhsId);
        let rhsReg = CacheIR::useInt32Reg(rhsId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Mov(rhsReg, scratchReg);
        emit MASM::BranchAdd32(Condition::Overflow, lhsReg, scratchReg, failure);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32SubResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Reg(lhsId);
        let rhsReg = CacheIR::useInt32Reg(rhsId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Mov(lhsReg, scratchReg);
        emit MASM::BranchSub32(Condition::Overflow, rhsReg, scratchReg, failure);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32MulResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Reg(lhsId);
        let rhsReg = CacheIR::useInt32Reg(rhsId);

        let scratchReg = CacheIR::allocateReg();
        let scratch2Reg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        label maybeNegZero: MASM;
        label done: MASM;

        emit MASM::Mov(lhsReg, scratchReg);
        emit MASM::BranchMul32(Condition::Overflow, rhsReg, scratchReg, failure);
        emit MASM::BranchTest32(Condition::Zero, scratchReg, scratchReg, maybeNegZero);
        emit MASM::Jump(done);

        bind maybeNegZero;
        emit MASM::Mov(lhsReg, scratch2Reg);
        emit MASM::Or32(rhsReg, scratch2Reg);
        emit MASM::BranchTest32(Condition::Signed, scratch2Reg, scratch2Reg, failure);

        bind done;
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
        CacheIR::releaseReg(scratch2Reg);
    }

    op Int32BitOrResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Reg(lhsId);
        let rhsReg = CacheIR::useInt32Reg(rhsId);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::Mov(rhsReg, scratchReg);
        emit MASM::Or32(lhsReg, scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32NegationResult(inputId: Int32Id) {
        let inputReg = CacheIR::useInt32Reg(inputId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTest32Imm(Condition::Zero, inputReg, 0_i32, failure);
        emit MASM::Mov(inputReg, scratchReg);
        emit MASM::Neg32(scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32MinMax(isMax: Bool, firstId: Int32Id, secondId: Int32Id, resultId: Int32Id) {
        let firstReg = CacheIR::useInt32Reg(firstId);
        let secondReg = CacheIR::useInt32Reg(secondId);
        let resultReg = CacheIR::defineInt32Reg(resultId);

        emit MASM::Mov(firstReg, resultReg);
        if isMax {
            emit MASM::Cmp32Move32(Condition::GreaterThan, secondReg,
                firstReg, secondReg, resultReg);
        } else {
            emit MASM::Cmp32Move32(Condition::LessThan, secondReg,
                firstReg, secondReg, resultReg);
        }
    }

    fn addFailurePath(out label failure: MASM);

    #[refined]
    fn knownType(valueId: ValueId) -> JSValueType {
        let operandId = valueId as OperandId;
        let location = CacheIR::getOperandLocation(operandId);
        let locationKind = OperandLocation::kind(location);

        if locationKind == OperandLocationKind::ValueReg {
            return JSValueType::Unknown;
        } else if locationKind == OperandLocationKind::PayloadReg {
            return OperandLocation::getPayloadType(location);
        }

        assert false;
        return JSValueType::Unknown;
    }

    fn allocateReg() -> Reg;
    fn allocateKnownReg(reg: Reg);
    fn releaseReg(reg: Reg);

    fn allocateValueReg() -> ValueReg;
    fn releaseValueReg(valueReg: ValueReg);

    fn defineReg(typedId: TypedId) -> Reg;
    fn defineValueReg(valueId: ValueId) -> ValueReg;

    #[refined]
    fn defineInt32Reg(id: Int32Id) -> Reg {
        let typedId = TypedId::fromInt32Id(id);
        CacheIR::defineReg(typedId)
    }

    fn getOperandLocation(id: OperandId) -> OperandLocation;
    fn setOperandLocation(id: OperandId, loc: OperandLocation);

    #[refined]
    fn useReg(id: TypedId) emits MASM -> Reg {
        let operandId = id as OperandId; 
        let location = CacheIR::getOperandLocation(operandId);
        let locationKind = OperandLocation::kind(location);

        if locationKind == OperandLocationKind::PayloadReg {
            return OperandLocation::getPayloadReg(location);
        } else if locationKind == OperandLocationKind::ValueReg {
            let valueReg = OperandLocation::getValueReg(location);
            CacheIR::releaseValueReg(valueReg);
            let reg = ValueReg::scratchReg(valueReg);
            CacheIR::allocateKnownReg(reg);
            emit MASM::UnboxNonDouble(valueReg, reg, TypedId::type(id));
            OperandLocation::setPayloadReg(out location, reg, TypedId::type(id));
            CacheIR::setOperandLocation(operandId, location);
            return reg;
        } else {
            assert false;
        }
        return OperandLocation::getPayloadReg(location);
    }

    #[refined]
    fn useValueReg(valueId: ValueId) emits MASM -> ValueReg {
        let operandId = valueId as OperandId; 
        let location = CacheIR::getOperandLocation(operandId);
        let locationKind = OperandLocation::kind(location);

        if locationKind == OperandLocationKind::ValueReg {
            return OperandLocation::getValueReg(location);
        } else if locationKind == OperandLocationKind::PayloadReg {
            let reg = OperandLocation::getPayloadReg(location);
            let valTy = OperandLocation::getPayloadType(location);
            let valueReg = CacheIR::allocateValueReg();
            emit MASM::TagValue(valTy, reg, valueReg);
            OperandLocation::setValueReg(out location, valueReg);
            CacheIR::releaseReg(reg);
            return valueReg;
        } else {
            assert false;
        }
        return OperandLocation::getValueReg(location);
    }

    #[refined]
    fn useObjectReg(id: ObjectId) emits MASM -> Reg {
        let typedId = TypedId::fromObjectId(id);
        CacheIR::useReg(typedId)
    }

    #[refined]
    fn useInt32Reg(id: Int32Id) emits MASM -> Reg {
        let typedId = TypedId::fromInt32Id(id);
        CacheIR::useReg(typedId)
    }

    #[refined]
    fn useBooleanReg(id: BooleanId) emits MASM -> Reg {
        let typedId = TypedId::fromBooleanId(id);
        CacheIR::useReg(typedId)
    }

    #[refined]
    fn useStringReg(id: StringId) emits MASM -> Reg {
        let typedId = TypedId::fromStringId(id);
        CacheIR::useReg(typedId)
    }

    #[refined]
    fn useValueTagReg(id: ValueTagId) emits MASM -> Reg {
        let typedId = TypedId::fromValueTagId(id);
        CacheIR::useReg(typedId)
    }

    var outputReg: TypedOrValueReg;

    #[refined]
    fn emitLoadInt32StubField(int32Field: Int32Field, dstReg: Reg) emits MASM {
       emit MASM::Move32Imm32(CacheIR::readInt32Field(int32Field), dstReg); 
    }

    fn readInt32Field(int32Field: Int32Field) -> Int32;
    fn readStringField(stringField: StringField) -> String;
    fn readShapeField(shapeField: ShapeField) -> Shape;
    fn readClassField(classField: ClassField) -> Class;

    fn objectGuardNeedsSpectreMitigations(objectId: ObjectId) -> Bool;

    fn liveFloatRegSet() -> FloatRegSet;

    fn liveVolatileFloatRegs() -> FloatRegSet {
        FloatRegSet::newIntersect(CacheIR::liveFloatRegSet(), FloatRegSet::newVolatile())
    }
}
