// vim: set tw=99 ts=4 sts=4 sw=4 et:

import "./MASM.cachet";

enum OperandLocationKind {
    Uninitialized,
    PayloadReg,
    ValueReg,
}

struct OperandLocation;

impl OperandLocation {
    fn kind(loc: OperandLocation) -> OperandLocationKind; 

    fn newUninitialized() -> OperandLocation {
        let loc = (unsafe { OperandLocation::newUninitializedUnchecked() });
        assume OperandLocation::kind(loc) == OperandLocationKind::Uninitialized;
        loc
    }

    unsafe fn newUninitializedUnchecked() -> OperandLocation;

    fn setValueReg(out loc: OperandLocation, valueReg: ValueReg) {
        (unsafe { OperandLocation::setValueRegUnchecked(out loc, valueReg) }); 
        assume OperandLocation::kind(loc) == OperandLocationKind::ValueReg;
        assume (unsafe { OperandLocation::getValueRegUnchecked(loc) } ) == valueReg;
    }

    unsafe fn setValueRegUnchecked(out loc: OperandLocation, valueReg: ValueReg);

    fn getValueReg(loc: OperandLocation) -> ValueReg {
        assert OperandLocation::kind(loc) == OperandLocationKind::ValueReg;
        let valueReg = (unsafe { OperandLocation::getValueRegUnchecked(loc) });
        valueReg
    }

    unsafe fn getValueRegUnchecked(loc: OperandLocation) -> ValueReg;

    fn setPayloadReg(out loc: OperandLocation, reg: Reg, type: JSValueType) {
        (unsafe { OperandLocation::setPayloadRegUnchecked(out loc, reg, type) }); 
        assume OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        assume (unsafe { OperandLocation::getPayloadRegUnchecked(loc) } ) == reg;
        assume (unsafe { OperandLocation::getPayloadTypeUnchecked(loc) } ) == type;
    }

    unsafe fn setPayloadRegUnchecked(out loc: OperandLocation, reg: Reg, type: JSValueType);

    fn getPayloadReg(loc: OperandLocation) -> Reg {
        assert OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        let reg = (unsafe { OperandLocation::getPayloadRegUnchecked(loc) });
        reg
    }

    unsafe fn getPayloadRegUnchecked(loc: OperandLocation) -> Reg;

    fn getPayloadType(loc: OperandLocation) -> JSValueType {
        assert OperandLocation::kind(loc) == OperandLocationKind::PayloadReg;
        let type = (unsafe { OperandLocation::getPayloadTypeUnchecked(loc) });
        type
    }

    unsafe fn getPayloadTypeUnchecked(loc: OperandLocation) -> JSValueType;

}

struct OperandId;

impl OperandId {
    fn id(operandId: OperandId) -> UInt16;

    fn fromId(id: UInt16) -> OperandId {
        let operandId = unsafe { OperandId::fromIdUnchecked(id) };
        assume OperandId::id(operandId) == id;
        operandId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> OperandId;

    fn toValueId(operandId: OperandId) -> ValueId {
        ValueId::fromId(OperandId::id(operandId))
    }

    fn toObjectId(operandId: OperandId) -> ObjectId {
        ObjectId::fromId(OperandId::id(operandId))
    }

    fn toStringId(operandId: OperandId) -> StringId {
        StringId::fromId(OperandId::id(operandId))
    }

    fn toSymbolId(operandId: OperandId) -> SymbolId {
        SymbolId::fromId(OperandId::id(operandId))
    }

    fn toBoolId(operandId: OperandId) -> BoolId {
        BoolId::fromId(OperandId::id(operandId))
    }

    fn toInt32Id(operandId: OperandId) -> Int32Id {
        Int32Id::fromId(OperandId::id(operandId))
    }

    fn toNumberId(operandId: OperandId) -> NumberId {
        NumberId::fromId(OperandId::id(operandId))
    }

    fn toBigIntId(operandId: OperandId) -> BigIntId {
        BigIntId::fromId(OperandId::id(operandId))
    }

    fn toValueTagId(operandId: OperandId) -> ValueTagId {
        ValueTagId::fromId(OperandId::id(operandId))
    }
}

struct ValueId <: OperandId;

impl ValueId {
    fn fromId(id: UInt16) -> ValueId {
        let valueId = unsafe { ValueId::fromIdUnchecked(id) };
        assume OperandId::id(valueId) == id;
        valueId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> ValueId;
}

struct ObjectId <: OperandId;

impl ObjectId {
    fn fromId(id: UInt16) -> ObjectId {
        let objectId = unsafe { ObjectId::fromIdUnchecked(id) };
        assume OperandId::id(objectId) == id;
        objectId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> ObjectId;
}

struct StringId <: OperandId;

impl StringId {
    fn fromId(id: UInt16) -> StringId {
        let stringId = unsafe { StringId::fromIdUnchecked(id) };
        assume OperandId::id(stringId) == id;
        stringId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> StringId;
}

struct SymbolId <: OperandId;

impl SymbolId {
    fn fromId(id: UInt16) -> SymbolId {
        let symbolId = unsafe { SymbolId::fromIdUnchecked(id) };
        assume OperandId::id(symbolId) == id;
        symbolId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> SymbolId;
}

struct BoolId <: OperandId;

impl BoolId {
    fn fromId(id: UInt16) -> BoolId {
        let boolId = unsafe { BoolId::fromIdUnchecked(id) };
        assume OperandId::id(boolId) == id;
        boolId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> BoolId;
}

struct Int32Id <: OperandId;

impl Int32Id {
    fn fromId(id: UInt16) -> Int32Id {
        let int32Id = unsafe { Int32Id::fromIdUnchecked(id) };
        assume OperandId::id(int32Id) == id;
        int32Id
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> Int32Id;
}

struct NumberId <: ValueId;

impl NumberId {
    fn fromId(id: UInt16) -> NumberId {
        let numberId = unsafe { NumberId::fromIdUnchecked(id) };
        assume OperandId::id(numberId) == id;
        numberId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> NumberId;
}

struct BigIntId <: OperandId;

impl BigIntId {
    fn fromId(id: UInt16) -> BigIntId {
        let bigIntId = unsafe { BigIntId::fromIdUnchecked(id) };
        assume OperandId::id(bigIntId) == id;
        bigIntId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> BigIntId;
}

struct ValueTagId <: OperandId;

impl ValueTagId {
    fn fromId(id: UInt16) -> ValueTagId {
        let valueTagId = unsafe { ValueTagId::fromIdUnchecked(id) };
        assume OperandId::id(valueTagId) == id;
        valueTagId
    }

    unsafe fn fromIdUnchecked(id: UInt16) -> ValueTagId;
}

struct TypedId <: OperandId;

impl TypedId {
    fn type(typedId: TypedId) -> JSValueType;

    fn new(id: UInt16, type: JSValueType) -> TypedId {
        let typedId = unsafe { TypedId::newUnchecked(id, type) };
        assume OperandId::id(typedId) == id;
        assume TypedId::type(typedId) == type;
        typedId
    }

    unsafe fn newUnchecked(id: UInt16, type: JSValueType) -> TypedId;

    fn fromObjectId(objectId: ObjectId) -> TypedId {
        TypedId::new(OperandId::id(objectId), JSValueType::Object)
    }

    fn toObjectId(typedId: TypedId) -> ObjectId {
        assert TypedId::type(typedId) == JSValueType::Object;
        OperandId::toObjectId(typedId)
    }

    fn fromStringId(stringId: StringId) -> TypedId {
        TypedId::new(OperandId::id(stringId), JSValueType::String)
    }

    fn toStringId(typedId: TypedId) -> StringId {
        assert TypedId::type(typedId) == JSValueType::String;
        OperandId::toStringId(typedId)
    }

    fn fromSymbolId(symbolId: SymbolId) -> TypedId {
        TypedId::new(OperandId::id(symbolId), JSValueType::Symbol)
    }

    fn toSymbolId(typedId: TypedId) -> SymbolId {
        assert TypedId::type(typedId) == JSValueType::Symbol;
        OperandId::toSymbolId(typedId)
    }

    fn fromBoolId(boolId: BoolId) -> TypedId {
        TypedId::new(OperandId::id(boolId), JSValueType::Bool)
    }

    fn toBoolId(typedId: TypedId) -> BoolId {
        assert TypedId::type(typedId) == JSValueType::Bool;
        OperandId::toBoolId(typedId)
    }

    fn fromInt32Id(int32Id: Int32Id) -> TypedId {
        TypedId::new(OperandId::id(int32Id), JSValueType::Int32)
    }

    fn toInt32Id(typedId: TypedId) -> Int32Id {
        assert TypedId::type(typedId) == JSValueType::Int32;
        OperandId::toInt32Id(typedId)
    }

    fn fromBigIntId(bigIntId: BigIntId) -> TypedId {
        TypedId::new(OperandId::id(bigIntId), JSValueType::BigInt)
    }

    fn toBigIntId(typedId: TypedId) -> BigIntId {
        assert TypedId::type(typedId) == JSValueType::BigInt;
        OperandId::toBigIntId(typedId)
    }

    fn fromValueTagId(valueTagId: ValueTagId) -> TypedId {
        TypedId::new(OperandId::id(valueTagId), JSValueType::Unknown)
    }

    fn toValueTagId(typedId: TypedId) -> ValueTagId {
        assert TypedId::type(typedId) == JSValueType::Unknown;
        OperandId::toValueTagId(typedId)
    }
}

struct Int32Field;

impl Int32Field {
    fn fromOffset(offset: UInt32) -> Int32Field;
}

struct ObjectField;

impl ObjectField {
    fn fromOffset(offset: UInt32) -> ObjectField;
}

struct ShapeField;

impl ShapeField {
    fn fromOffset(offset: UInt32) -> ShapeField;
}

struct ClassField;

impl ClassField {
    fn fromOffset(offset: UInt32) -> ClassField;
}

struct SymbolField;

impl SymbolField {
    fn fromOffset(offset: UInt32) -> SymbolField;
}

struct StringField;

impl StringField {
    fn fromOffset(offset: UInt32) -> StringField;
}

enum GuardClassKind {
    Array,
    ArrayBuffer,
    SharedArrayBuffer,
    DataView,
    MappedArguments,
    UnmappedArguments,
    WindowProxy,
    JSFunction,
    Set,
    Map,
}

ir CacheIR emits MASM {
    // ops from CacheIRCompiler

    op GuardIsNumber(inputId: ValueId) {
        let knownType = CacheIR::knownType(inputId);

        if knownType == JSValueType::Double || knownType == JSValueType::Int32 {
           return;
        }

        let inputReg = CacheIR::useValueId(inputId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestNumber(Condition::NotEqual, inputReg, failure);
    }

    op GuardToObject(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Object {
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestObject(Condition::NotEqual, inputReg, failure);
    }

    op GuardIsNullOrUndefined(inputId: ValueId) {
        let knownType = CacheIR::knownType(inputId);
        if knownType == JSValueType::Undefined || knownType == JSValueType::Null {
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);
        CacheIR::addFailurePath(out label failure);

        label success: MASM;
        emit MASM::BranchTestNull(Condition::Equal, inputReg, success);
        emit MASM::BranchTestUndefined(Condition::NotEqual, inputReg, failure);

        bind success;
    }

    op GuardIsNull(inputId: ValueId){
        if CacheIR::knownType(inputId) == JSValueType::Null {
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestNull(Condition::NotEqual, inputReg, failure);
    }

    op GuardIsUndefined(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Undefined {
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::BranchTestUndefined(Condition::NotEqual, inputReg, failure);
    }

    op GuardBooleanToInt32(inputId: ValueId, resultId: Int32Id) {
        let resultReg = CacheIR::defineInt32Id(resultId);

        if CacheIR::knownType(inputId) == JSValueType::Bool {
            let boolId = BoolId::fromId(OperandId::id(inputId));
            let inputReg = CacheIR::useBoolId(boolId);
            emit MASM::MovData(inputReg, resultReg);
            emit MASM::CastBoolToInt32(resultReg);
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);

        CacheIR::addFailurePath(out label failure);
        emit MASM::FallibleUnboxBoolean(inputReg, resultReg, failure);
        emit MASM::CastBoolToInt32(resultReg);
    }

    op GuardToString(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::String {
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestString(Condition::NotEqual, inputReg, failure);
    }

    op GuardToSymbol(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Symbol {
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestSymbol(Condition::NotEqual, inputReg, failure);
    }

    op GuardToBigInt(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::BigInt {
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestBigInt(Condition::NotEqual, inputReg, failure);
    }

    op GuardToBoolean(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Bool {
            return;
        }
        let inputReg = CacheIR::useValueId(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestBoolean(Condition::NotEqual, inputReg, failure);
    }

    op GuardToInt32(inputId: ValueId) {
        if CacheIR::knownType(inputId) == JSValueType::Int32 {
            return;
        }
        let inputReg = CacheIR::useValueId(inputId);

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestInt32(Condition::NotEqual, inputReg, failure);
    }

    /*op GuardToInt32Index(inputId: ValueId, resultId: Int32Id) {
        let outputReg = CacheIR::defineInt32Reg(resultId);

        let inputReg = CacheIR::useValueReg(inputId);

        CacheIR::addFailurePath(out label failure);

        label done: MASM;

        {
            let tagReg = CacheIR::allocateScratchReg();
            emit MASM::SplitTagForTest(inputReg, tagReg);

            label notInt32: MASM;
            emit MASM::BranchTestInt32Tag(Condition::NotEqual, tagReg, notInt32);
            {
                CacheIR::releaseReg(tagReg);
                emit MASM::UnboxInt32(inputReg, outputReg);
                emit MASM::Jump(done);
                CacheIR::allocateScratchReg();
            }
            bind notInt32;

            emit MASM::BranchTestDoubleTag(Condition::NotEqual, tagReg, failure);
            {
                CacheIR::releaseReg(tagReg);
                let floatReg = CacheIR::allocateAvailableFloatReg(FloatReg::floatReg0());

                emit MASM::UnboxDouble(inputReg, floatReg);
                emit MASM::ConvertDoubleToInt32(floatReg, outputReg, failure, false);
                CacheIR::allocateScratchReg();
            }
            CacheIR::releaseReg(tagReg);
        }

        bind done;
    }*/

    op GuardNonDoubleType(inputId: ValueId, type: ValueType) {
        if CacheIR::knownType(inputId) == JSValueType::fromValueType(type) {
            return;
        }

        let inputReg = CacheIR::useValueId(inputId);

        CacheIR::addFailurePath(out label failure);

        if type == ValueType::String {
            emit MASM::BranchTestString(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Symbol {
            emit MASM::BranchTestSymbol(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::BigInt {
            emit MASM::BranchTestBigInt(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Int32 {
            emit MASM::BranchTestInt32(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Bool {
            emit MASM::BranchTestBoolean(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Undefined {
            emit MASM::BranchTestUndefined(Condition::NotEqual, inputReg, failure);
        } else if type == ValueType::Null {
            emit MASM::BranchTestNull(Condition::NotEqual, inputReg, failure);
        } else {
            assert false;
        }
    }

    op GuardClass(objId: ObjectId, kind: GuardClassKind) {
        let objReg = CacheIR::useObjectId(objId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        let class = ArrayObject::class();

        if kind == GuardClassKind::Array {
            class = ArrayObject::class();
        } else if kind == GuardClassKind::ArrayBuffer {
            class = ArrayBufferObject::class();
        } else if kind == GuardClassKind::SharedArrayBuffer {
            class = SharedArrayBufferObject::class();
        } else if kind == GuardClassKind::DataView {
            class = DataViewObject::class();
        } else if kind == GuardClassKind::MappedArguments {
            class = MappedArgumentsObject::class();
        } else if kind == GuardClassKind::UnmappedArguments {
            class = UnmappedArgumentsObject::class();
        } else if kind == GuardClassKind::WindowProxy {
            class = Class::windowProxyClass();
        } else if kind == GuardClassKind::Set {
            class = SetObject::class();
        } else if kind == GuardClassKind::Map {
            class = MapObject::class();
        } else if kind == GuardClassKind::JSFunction {
            class = JSFunction::class();
        } else {
            assert false;
        }

        if CacheIR::objectGuardNeedsSpectreMitigations(objId) {
            emit MASM::BranchTestObjClass(Condition::NotEqual, objReg, class, scratchReg, objReg,
                    failure);
        } else {
            emit MASM::BranchTestObjClassNoSpectreMitigations(Condition::NotEqual, objReg, class,
                    scratchReg, failure);
        }

        CacheIR::releaseReg(scratchReg);
    }

    op GuardIsNativeObject(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchIfNonNativeObj(objectReg, scratchReg, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op GuardIsProxy(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();
        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTestObjectIsProxy(false, objectReg, scratchReg, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op GuardNoDenseElements(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::LoadPtrAddress(
            Address::new(objectReg, NativeObject::offsetOfElements as Int32), scratchReg
        );

        let initLength = Address::new(scratchReg, NativeObjectElements::offsetOfInitializedLength as Int32);

        emit MASM::Branch32AddressImm32(Condition::NotEqual, initLength, 0_i32, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op BooleanToNumber(booleanId: BoolId, resultId: NumberId) {
        let booleanReg = CacheIR::useBoolId(booleanId);
        let resultReg = CacheIR::defineNumberId(resultId);

        emit MASM::CastBoolToInt32(booleanReg);
        emit MASM::TagValue(JSValueType::Int32, booleanReg, resultReg);
    }

    op LoadProto(objectId: ObjectId, resultId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let resultReg = CacheIR::defineObjectId(resultId);

        emit MASM::LoadObjectProto(objectReg, resultReg);
        emit MASM::UnboxObjectProto(resultReg, resultReg);
    }

    op GuardInt32IsNonNegative(indexId: Int32Id) {
        let indexReg = CacheIR::useInt32Id(indexId);
        CacheIR::addFailurePath(out label failure);
        emit MASM::Branch32Imm(Condition::LessThan, indexReg, 0_i32, failure);
    }

    op GuardTagNotEqual(lhsId: ValueTagId, rhsId: ValueTagId) {
        let lhsReg = CacheIR::useValueTagId(lhsId);
        let rhsReg = CacheIR::useValueTagId(rhsId);

        CacheIR::addFailurePath(out label failure);

        label done: MASM;

        emit MASM::Branch32Tag(Condition::Equal, lhsReg, rhsReg, failure);

        emit MASM::BranchTestNumberTag(Condition::NotEqual, lhsReg, done);
        emit MASM::BranchTestNumberTag(Condition::NotEqual, rhsReg, done);

        emit MASM::Jump(failure);

        bind done;
    }

    op LoadDenseElementResult(objectId: ObjectId, indexId: Int32Id) {
        let objReg = CacheIR::useObjectId(objectId);
        let indexReg = CacheIR::useInt32Id(indexId);

        let scratchReg1 = CacheIR::allocateReg();
        let scratchReg2 = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::LoadPtrAddress(
            Address::new(objReg, NativeObject::offsetOfElements as Int32), scratchReg1
        );

        let initLength = Address::new(scratchReg1,
                NativeObjectElements::offsetOfInitializedLength);
        emit MASM::SpectreBoundsCheck32Address(indexReg, initLength, scratchReg2, failure);

        let element = BaseObjectElementIndex::new(scratchReg1, indexReg, 0_u32);
        emit MASM::BranchTestMagicBaseObjectElementIndex(Condition::Equal, element, failure);
        emit MASM::LoadTypedOrValueBaseObjectElementIndex(element, CacheIR::outputReg);

        CacheIR::releaseReg(scratchReg2);
        CacheIR::releaseReg(scratchReg1);
    }

    op LoadDenseElementHoleResult(objId: ObjectId, indexId: Int32Id) {
        let objReg = CacheIR::useObjectId(objId);
        let indexReg = CacheIR::useInt32Id(indexId);

        let scratchReg1 = CacheIR::allocateReg();
        let scratchReg2 = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Branch32Imm(Condition::LessThan, indexReg, 0_i32, failure);

        emit MASM::LoadPtrAddress(
            Address::new(objReg, NativeObject::offsetOfElements as Int32), scratchReg1
        );

        label hole: MASM;

        let initLength = Address::new(scratchReg1,
                NativeObjectElements::offsetOfInitializedLength);
        emit MASM::SpectreBoundsCheck32Address(indexReg, initLength, scratchReg2, hole);

        label done: MASM;
        let element = BaseObjectElementIndex::new(scratchReg1, indexReg, 0_u32);
        emit MASM::LoadValueBaseObjectElementIndex(element,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));
        emit MASM::BranchTestMagic(Condition::NotEqual,
                TypedOrValueReg::toValueReg(CacheIR::outputReg), done);

        bind hole;
        emit MASM::MoveValueImm(Value::getUndefined(),
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        bind done;

        CacheIR::releaseReg(scratchReg2);
        CacheIR::releaseReg(scratchReg1);
    }

    op IsObjectResult(inputId: ValueId) {
        let scratchReg = CacheIR::allocateReg();
        let valueReg = CacheIR::useValueId(inputId);

        emit MASM::TestObjectSet(Condition::Equal, valueReg, scratchReg);
        emit MASM::TagValue(JSValueType::Bool, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32MinMax(isMax: Bool, firstId: Int32Id, secondId: Int32Id, resultId: Int32Id) {
        let firstReg = CacheIR::useInt32Id(firstId);
        let secondReg = CacheIR::useInt32Id(secondId);
        let resultReg = CacheIR::defineInt32Id(resultId);

        emit MASM::Mov(firstReg, resultReg);
        if isMax {
            emit MASM::Cmp32Move32(Condition::GreaterThan, secondReg,
                firstReg, secondReg, resultReg);
        } else {
            emit MASM::Cmp32Move32(Condition::LessThan, secondReg,
                firstReg, secondReg, resultReg);
        }
    }

    op LoadObjectResult(objId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objId);
        CacheIR::emitStoreResult(objectReg, JSValueType::Object, CacheIR::outputReg);
    }

    op LoadObject(resultId: ObjectId, objField: ObjectField) {
        let resultReg = CacheIR::defineObjectId(resultId);
        CacheIR::emitLoadObjectStubField(objField, resultReg);
    }

    op LoadStringResult(stringId: StringId) {
        let stringReg = CacheIR::useStringId(stringId);
        emit MASM::TagValue(JSValueType::String, stringReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));
    }

    op LoadSymbolResult(symbolId: SymbolId) {
        let symbolReg = CacheIR::useSymbolId(symbolId);
        emit MASM::TagValue(JSValueType::Symbol, symbolReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));
    }

    op LoadInt32Result(int32Id: Int32Id) {
        let int32Reg = CacheIR::useInt32Id(int32Id);
        emit MASM::TagValue(JSValueType::Int32, int32Reg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));
    }

    op LoadValueTag(valId: ValueId, resultId: ValueTagId) {
        let valReg = CacheIR::useValueId(valId);
        let resultReg = CacheIR::defineValueTagId(resultId);

        let tagReg = MASM::extractTag(valReg, resultReg);
        if(tagReg != resultReg) {
            emit MASM::Mov(tagReg, resultReg);
        }
    }

    op LoadBooleanResult(bool: Bool) {
        CacheIR::emitStoreBool(bool, CacheIR::outputReg);
    }

    op LoadInt32ArrayLengthResult(objectId: ObjectId) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::LoadPtrAddress(
            Address::new(objectReg, NativeObject::offsetOfElements as Int32), scratchReg
        );
        emit MASM::Load32Address(
            Address::new(scratchReg, NativeObjectElements::offsetOfLength), scratchReg
        );

        emit MASM::BranchTest32(Condition::Signed, scratchReg, scratchReg, failure);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op LoadBigIntResult(bigIntId: BigIntId) {
        let bigIntReg = CacheIR::useBigIntId(bigIntId);
        emit MASM::TagValue(JSValueType::BigInt, bigIntReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));
    }

    op LoadDoubleResult(numberId: NumberId) {
        let numberReg = CacheIR::useNumberId(numberId);

        // ifdef DEBUG
        // label ok: MASM;
        // emit MASM::BranchTestDouble(Condition::Equal, numberReg, ok);
        // emit MASM::BranchTestInt32(Condition::Equal, numberReg, ok);
        // emit MASM::AssumeUnreachable();
        // bind ok;
        // endif

        emit MASM::MoveValue(numberReg, TypedOrValueReg::toValueReg(CacheIR::outputReg));
        emit MASM::ConvertInt32ValueToDouble(TypedOrValueReg::toValueReg(CacheIR::outputReg));
    }

    op LoadInt32Constant(valField: Int32Field, resultId: Int32Id) {
        let resultReg = CacheIR::defineInt32Id(resultId);

        CacheIR::emitLoadInt32StubField(valField, resultReg);
    }

    op LoadInt32TruthyResult(inputId: ValueId) {
        let valueReg = CacheIR::useValueId(inputId);

        label ifFalse: MASM;
        label done: MASM;
        emit MASM::BranchTestInt32Truthy(false, valueReg, ifFalse);
        emit MASM::MoveValueImm(Value::fromBool(true),
                TypedOrValueReg::toValueReg(CacheIR::outputReg));
        emit MASM::Jump(done);

        bind ifFalse;
        emit MASM::MoveValueImm(Value::fromBool(false),
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        bind done;
    }

    // ops from IonCacheIRCompiler

    op GuardShape(objectId: ObjectId, shapeField: ShapeField) {
        let objectReg = CacheIR::useObjectId(objectId);
        let shape = CacheIR::readShapeField(shapeField);

        let scratchReg = CacheIR::allocateReg();
        CacheIR::addFailurePath(out label failure);

        let needsSpectreMitigations = CacheIR::objectGuardNeedsSpectreMitigations(objectId);

        if needsSpectreMitigations {
            emit MASM::BranchTestObjectShape(
                    Condition::NotEqual, objectReg, shape, scratchReg, objectReg, failure
                    );
            CacheIR::releaseReg(scratchReg);
        } else {
            CacheIR::releaseReg(scratchReg);
            emit MASM::BranchTestObjectShapeNoSpectreMitigations(
                    Condition::NotEqual, objectReg, shape, failure
                    );
        }
    }

    op GuardAnyClass(objectId: ObjectId, classField: ClassField) {
        let objectReg = CacheIR::useObjectId(objectId);
        let scratchReg = CacheIR::allocateReg();
        let class = CacheIR::readClassField(classField);

        CacheIR::addFailurePath(out label failure);

        let needsSpectreMitigations = CacheIR::objectGuardNeedsSpectreMitigations(objectId);

        if needsSpectreMitigations {
            emit MASM::BranchTestObjClass(
                Condition::NotEqual, objectReg, class, scratchReg, objectReg, failure
            );
        } else {
            emit MASM::BranchTestObjClassNoSpectreMitigations(
                Condition::NotEqual, objectReg, class, scratchReg, failure
            );
        }

        CacheIR::releaseReg(scratchReg);
    }

    op GuardSpecificAtom(strId: StringId, stringField: StringField) {
        let strReg = CacheIR::useStringId(strId);
        let scratchReg = CacheIR::allocateReg();

        let atom = String::asAtom(CacheIR::readStringField(stringField));

        CacheIR::addFailurePath(out label failure);

        let volatileRegs = LiveRegSet::new(
            GeneralRegSet::newVolatile(), CacheIR::liveVolatileFloatRegs()
        );
        LiveRegSet::takeReg(out volatileRegs, volatileRegs, scratchReg);

        emit MASM::GuardSpecificAtom(strReg, atom, scratchReg, volatileRegs, failure);

        CacheIR::releaseReg(scratchReg);
    }

    op LoadFixedSlotResult(objectId: ObjectId, slotField: Int32Field) {
        let objectReg = CacheIR::useObjectId(objectId);
        let slotOffset = CacheIR::readInt32Field(slotField);

        emit MASM::LoadTypedOrValueAddress(Address::new(objectReg, slotOffset), CacheIR::outputReg);
    }

    op LoadDynamicSlotResult(objectId: ObjectId, slotField: Int32Field) {
        let objectReg = CacheIR::useObjectId(objectId);
        let slotOffset = CacheIR::readInt32Field(slotField);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::LoadPtrAddress(
            Address::new(objectReg, NativeObject::offsetOfSlots as Int32), scratchReg
        );
        emit MASM::LoadTypedOrValueAddress(
            Address::new(scratchReg, slotOffset), CacheIR::outputReg
        );

        CacheIR::releaseReg(scratchReg);
    }

    op Int32AddResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Mov(rhsReg, scratchReg);
        emit MASM::BranchAdd32(Condition::Overflow, lhsReg, scratchReg, failure);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32SubResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Mov(lhsReg, scratchReg);
        emit MASM::BranchSub32(Condition::Overflow, rhsReg, scratchReg, failure);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32MulResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let scratchReg = CacheIR::allocateReg();
        let scratch2Reg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        label maybeNegZero: MASM;
        label done: MASM;

        emit MASM::Mov(lhsReg, scratchReg);
        emit MASM::BranchMul32(Condition::Overflow, rhsReg, scratchReg, failure);
        emit MASM::BranchTest32(Condition::Zero, scratchReg, scratchReg, maybeNegZero);
        emit MASM::Jump(done);

        bind maybeNegZero;
        emit MASM::Mov(lhsReg, scratch2Reg);
        emit MASM::Or32(rhsReg, scratch2Reg);
        emit MASM::BranchTest32(Condition::Signed, scratch2Reg, scratch2Reg, failure);

        bind done;
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
        CacheIR::releaseReg(scratch2Reg);
    }

    op Int32BitOrResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::Mov(rhsReg, scratchReg);
        emit MASM::Or32(lhsReg, scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32BitXorResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::Mov(rhsReg, scratchReg);
        emit MASM::Xor32(lhsReg, scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }
    
    op Int32BitAndResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::Mov(rhsReg, scratchReg);
        emit MASM::And32(lhsReg, scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32LeftShiftResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::Mov(lhsReg, scratchReg);
        emit MASM::FlexibleLshift32(rhsReg, scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32RightShiftResult(lhsId: Int32Id, rhsId: Int32Id) {
        let lhsReg = CacheIR::useInt32Id(lhsId);
        let rhsReg = CacheIR::useInt32Id(rhsId);

        let scratchReg = CacheIR::allocateReg();
        emit MASM::Mov(lhsReg, scratchReg);
        emit MASM::FlexibleRshift32Arithmetic(rhsReg, scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32NegationResult(inputId: Int32Id) {
        let inputReg = CacheIR::useInt32Id(inputId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::BranchTest32Imm(Condition::Zero, inputReg, 0_i32, failure);
        emit MASM::Mov(inputReg, scratchReg);
        emit MASM::Neg32(scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32IncResult(inputId: Int32Id) {
        let inputReg = CacheIR::useInt32Id(inputId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Mov(inputReg, scratchReg);
        emit MASM::BranchAdd32Imm(Condition::Overflow, 1_i32, scratchReg, failure);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32DecResult(inputId: Int32Id) {
        let inputReg = CacheIR::useInt32Id(inputId);
        let scratchReg = CacheIR::allocateReg();

        CacheIR::addFailurePath(out label failure);

        emit MASM::Mov(inputReg, scratchReg);
        emit MASM::BranchSub32Imm(Condition::Overflow, 1_i32, scratchReg, failure);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    op Int32NotResult(inputId: Int32Id) {
        let inputReg = CacheIR::useInt32Id(inputId);
        let scratchReg = CacheIR::allocateReg();

        emit MASM::Mov(inputReg, scratchReg);
        emit MASM::Not32(scratchReg);
        emit MASM::TagValue(JSValueType::Int32, scratchReg,
                TypedOrValueReg::toValueReg(CacheIR::outputReg));

        CacheIR::releaseReg(scratchReg);
    }

    fn emitStoreBool(b: Bool, outputReg: TypedOrValueReg) emits MASM {
        if TypedOrValueReg::hasValue(outputReg) {
            let value = Value::fromBool(b);
            emit MASM::MoveValueImm(value, TypedOrValueReg::toValueReg(outputReg));
        } else {
            assert TypedOrValueReg::type(outputReg) == MIRType::Boolean;
            let anyReg = TypedOrValueReg::toTypedReg(outputReg);
            let reg = AnyReg::toReg(anyReg);
            emit MASM::MovePtrBoolImmWord(b, reg);
        }
    }

    fn addFailurePath(out label failure: MASM);

    fn hasAvailableReg() -> Bool;
    fn isAllocatedValueReg(valueReg: ValueReg) -> Bool;
    fn isAllocatedReg(reg: Reg) -> Bool;

    #[spec]
    fn isAllocatableReg(reg: Reg) -> Bool {
        // NOTE: rbp is allocatable in the latest versions of Firefox, but is not in
        // the current Cachet fork.
        reg != Reg::Rsp &&
        reg != Reg::Rbp &&
        reg != Reg::R11
    }

    fn allocateReg() -> Reg;
    // SAFETY: does not check that reg is an allocatable register
    unsafe fn allocateKnownReg(reg: Reg);
    fn releaseReg(reg: Reg);

    fn allocateValueReg() -> ValueReg;
    fn releaseValueReg(valueReg: ValueReg);

    fn defineValueId(valueId: ValueId) -> ValueReg;
    fn defineTypedId(typedId: TypedId) -> Reg;

    #[refined]
    fn defineObjectId(id: ObjectId) -> Reg {
        let typedId = TypedId::fromObjectId(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineInt32Id(id: Int32Id) -> Reg {
        let typedId = TypedId::fromInt32Id(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineNumberId(id: NumberId) -> ValueReg {
        let valueId = id as ValueId;
        CacheIR::defineValueId(valueId)
    }
        
    #[refined]
    fn defineBoolId(id: BoolId) -> Reg {
        let typedId = TypedId::fromBoolId(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineStringId(id: StringId) -> Reg {
        let typedId = TypedId::fromStringId(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineSymbolId(id: SymbolId) -> Reg {
        let typedId = TypedId::fromSymbolId(id);
        CacheIR::defineTypedId(typedId)
    }
    
    #[refined]
    fn defineBigIntId(id: BigIntId) -> Reg {
        let typedId = TypedId::fromBigIntId(id);
        CacheIR::defineTypedId(typedId)
    }

    #[refined]
    fn defineValueTagId(id: ValueTagId) -> Reg {
        let typedId = TypedId::fromValueTagId(id);
        CacheIR::defineTypedId(typedId)
    }

    fn getOperandLocation(id: OperandId) -> OperandLocation;
    fn setOperandLocation(id: OperandId, loc: OperandLocation);

    #[refined]
    fn knownType(valueId: ValueId) -> JSValueType {
        let operandId = valueId as OperandId; 
        let location = CacheIR::getOperandLocation(operandId);
        let locationKind = OperandLocation::kind(location);

        assert locationKind == OperandLocationKind::ValueReg ||
               locationKind == OperandLocationKind::PayloadReg;
        if locationKind == OperandLocationKind::PayloadReg {
            return OperandLocation::getPayloadType(location);
        } else {
            return JSValueType::Unknown;
        }
    }

    #[refined]
    fn useValueId(valueId: ValueId) emits MASM -> ValueReg {
        let operandId = valueId as OperandId; 
        let location = CacheIR::getOperandLocation(operandId);
        let locationKind = OperandLocation::kind(location);

        if locationKind == OperandLocationKind::ValueReg {
            return OperandLocation::getValueReg(location);
        } else if locationKind == OperandLocationKind::PayloadReg {
            let reg = OperandLocation::getPayloadReg(location);
            let valTy = OperandLocation::getPayloadType(location);
            let valueReg = CacheIR::allocateValueReg();
            emit MASM::TagValue(valTy, reg, valueReg);
            OperandLocation::setValueReg(out location, valueReg);
            CacheIR::releaseReg(reg);
            return valueReg;
        } else {
            assert false;
        }
        return OperandLocation::getValueReg(location);
    }

    #[refined]
    fn useTypedId(id: TypedId) emits MASM -> Reg {
        let operandId = id as OperandId; 
        let location = CacheIR::getOperandLocation(operandId);
        let locationKind = OperandLocation::kind(location);

        if locationKind == OperandLocationKind::PayloadReg {
            return OperandLocation::getPayloadReg(location);
        } else if locationKind == OperandLocationKind::ValueReg {
            let valueReg = OperandLocation::getValueReg(location);
            CacheIR::releaseValueReg(valueReg);
            let reg = ValueReg::scratchReg(valueReg);
            // safe because we know valueReg was previously allocated
            // with allocateValueReg and is allocatable
            unsafe { CacheIR::allocateKnownReg(reg); }
            emit MASM::UnboxNonDouble(valueReg, reg, TypedId::type(id));
            OperandLocation::setPayloadReg(out location, reg, TypedId::type(id));
            CacheIR::setOperandLocation(operandId, location);
            return reg;
        } else {
            assert false;
        }
        return OperandLocation::getPayloadReg(location);
    }

    #[refined]
    fn useObjectId(id: ObjectId) emits MASM -> Reg {
        let typedId = TypedId::fromObjectId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useInt32Id(id: Int32Id) emits MASM -> Reg {
        let typedId = TypedId::fromInt32Id(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useNumberId(id: NumberId) emits MASM -> ValueReg {
        let valueId = id as ValueId;
        CacheIR::useValueId(valueId)
    }

    #[refined]
    fn useBoolId(id: BoolId) emits MASM -> Reg {
        let typedId = TypedId::fromBoolId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useStringId(id: StringId) emits MASM -> Reg {
        let typedId = TypedId::fromStringId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useSymbolId(id: SymbolId) emits MASM -> Reg {
        let typedId = TypedId::fromSymbolId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useBigIntId(id: BigIntId) emits MASM -> Reg {
        let typedId = TypedId::fromBigIntId(id);
        CacheIR::useTypedId(typedId)
    }

    #[refined]
    fn useValueTagId(id: ValueTagId) emits MASM -> Reg {
        let typedId = TypedId::fromValueTagId(id);
        CacheIR::useTypedId(typedId)
    }

    var outputReg: TypedOrValueReg;

    fn emitStoreResult(reg: Reg, type: JSValueType, outputReg: TypedOrValueReg) emits MASM {
        if TypedOrValueReg::hasValue(outputReg) {
            emit MASM::TagValue(type, reg, TypedOrValueReg::toValueReg(outputReg));
            return;
        }

        if type == JSValueType::Int32 && AnyReg::isFloat(TypedOrValueReg::toTypedReg(outputReg)) {
            emit MASM::ConvertInt32ToDouble(reg,
                    AnyReg::toFloatReg(TypedOrValueReg::toTypedReg(outputReg)));
            return;
        }

        if type == JSValueType::fromMIRType(TypedOrValueReg::type(outputReg)) {
            emit MASM::MovData(reg, AnyReg::toReg(TypedOrValueReg::toTypedReg(outputReg)));
            return;
        }

        emit MASM::AssumeUnreachable();
    }

    #[refined]
    fn emitLoadInt32StubField(int32Field: Int32Field, dstReg: Reg) emits MASM {
       emit MASM::Move32Imm32(CacheIR::readInt32Field(int32Field), dstReg); 
    }

    #[refined]
    fn emitLoadObjectStubField(objectField: ObjectField, dstReg: Reg) emits MASM {
        emit MASM::MovePtrImmGCPtrObject(CacheIR::readObjectField(objectField), dstReg);
    }

    fn readInt32Field(int32Field: Int32Field) -> Int32;
    fn readObjectField(objectField: ObjectField) -> Object;
    fn readStringField(stringField: StringField) -> String;
    fn readShapeField(shapeField: ShapeField) -> Shape;
    fn readClassField(classField: ClassField) -> Class;

    fn objectGuardNeedsSpectreMitigations(objectId: ObjectId) -> Bool;

    fn liveFloatRegSet() -> FloatRegSet;

    fn liveVolatileFloatRegs() -> FloatRegSet {
        FloatRegSet::newIntersect(CacheIR::liveFloatRegSet(), FloatRegSet::newVolatile())
    }
}
