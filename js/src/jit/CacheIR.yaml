# [SMDOC] CacheIR IC Kinds
# ========================
# This section defines all CacheIR IC kinds and their inputs and outputs.
#
# Each key in the mapping is the name of a CacheKind.
#
# Each kind has the following attributes (all optional):
#
# inputs
# ======
# Mapping of input name to input type for the inputs that IC stubs of this kind
# expect to receive.
#
# output
# ======
# Type stored to the IC's output register, if applicable.
#
# ion_ic
# ======
# If the CacheKind is supported by the Ion engine, this attribute should specify
# the name of the IonIC that implements it. See "[SMDOC] Ion CacheIR ICs" below.

cache_kinds:

  GetProp:
    inputs:
      value: Val
    output: Val
    ion_ic: GetProperty

  GetElem:
    inputs:
      value: Val
      id: Val
    output: Val
    ion_ic: GetProperty

  GetName:
    inputs:
      environment: Obj
    output: Val
    ion_ic: GetName

  GetPropSuper:
    inputs:
      object: Obj
      receiver: Val
    output: Val
    ion_ic: GetPropSuper

  GetElemSuper:
    inputs:
      object: Obj
      id: Val
      receiver: Val
    output: Val
    ion_ic: GetPropSuper

  GetIntrinsic:
    output: Val

  SetProp:
    inputs:
      object: Obj
      rhs: Val
    ion_ic: SetProperty

  SetElem:
    inputs:
      object: Obj
      id: Val
      rhs: Val
    ion_ic: SetProperty

  BindName:
    inputs:
      environment: Obj
    output: Obj
    ion_ic: BindName

  In:
    inputs:
      key: Val
      object: Obj
    output: Boolean
    ion_ic: In

  HasOwn:
    inputs:
      id: Val
      value: Val
    output: Boolean
    ion_ic: HasOwn

  CheckPrivateField:
    inputs:
      value: Val
      id: Val
    output: Boolean
    ion_ic: CheckPrivateField

  TypeOf:
    inputs:
      value: Val
    output: Val

  ToPropertyKey:
    inputs:
      input: Val
    output: Val
    ion_ic: ToPropertyKey

  InstanceOf:
    inputs:
      lhs: Val
      rhs: Obj
    output: Boolean
    ion_ic: InstanceOf

  GetIterator:
    inputs:
      value: Val
    output: Obj
    ion_ic: GetIterator

  OptimizeSpreadCall:
    inputs:
      value: Val
    output: Boolean
    ion_ic: OptimizeSpreadCall

  Compare:
    inputs:
      lhs: Val
      rhs: Val
    output: Boolean
    ion_ic: Compare

  ToBool:
    inputs:
      value: Val
    output: Val

  Call:
    inputs:
      callee: Val
    output: Val

  UnaryArith:
    inputs:
      input: Val
    output: Val
    ion_ic: UnaryArith

  BinaryArith:
    inputs:
      lhs: Val
      rhs: Val
    output: Val
    ion_ic: BinaryArith

  NewObject:
    output: Val

  NewArray:
    output: Val

# [SMDOC] Ion CacheIR ICs
# =======================
# This section defines metadata for the Ion implementations of supported
# CacheKinds. They correspond to the 'ion_ic' attributes in the table above.
# Only IonICs with non-default attributes (e.g., IonICs requiring temp
# registers) need to be defined here. IonICs referenced by CacheKinds and not
# defined here will be automatically instantiated with values inferred from the
# CacheKind definitions.
#
# Each key in the mapping is the name of an IonIC. An IonIC named 'GetProperty'
# implies a corresponding C++ class named 'IonGetPropertyIC'.
#
# Each IonIC definition has the following attributes (all optional):
#
# inputs
# ======
# Mapping of input name to input type for the inputs that IC stubs backed by
# this IonIC expect to receive. Can be expressed as just a list of input names,
# in which case input types are inferred from the CacheKind definitions that
# reference this IonIC.
#
# This only needs to be explicitly defined when one or more inputs expected by
# this IonIC are elided by a CacheKind that refers to it. For example,
# the 'GetProperty' IonIC implements the 'GetElem' CacheKind for the Ion engine,
# which expects a 'value' to read a property from and the 'id' of the property
# to read. However, 'GetProperty' is also responsible for 'GetProp', which
# takes just a 'value' input at runtime and holds the 'id' constant. Because
# these input lists differ, the inputs to the 'GetProperty' IonIC cannot be
# automatically inferred.
#
# temps
# ======
# The number of temp registers required by stubs generated by this IonIC. This
# only needs to be explicitly defined when non-zero.

ion_ics:

  GetProperty:
    inputs: [value, id]

  GetName:
    temps: 1

  GetPropSuper:
    inputs: [object, id, receiver]

  SetProperty:
    inputs: [object, id, rhs]
    temps: 1

  BindName:
    temps: 1

  GetIterator:
    temps: 2

  OptimizeSpreadCall:
    temps: 1
